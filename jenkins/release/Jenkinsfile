#!groovy

node {
    def mvn
    stage('Prepare') {
        def mvnHome = tool 'M3'
        mvn = "${mvnHome}/bin/mvn"
        step([$class: 'WsCleanup'])
        git credentialsId: "${GIT_CREDENTIALS_ID}", url: "${REPO_URL}"
    }
    stage('Create release branch') {
        sh "git checkout -b feature/release"
    }
    stage('Set release version number') {
        sh "(cd lightning-core; ${mvn} versions:set -DnewVersion=${CORE_RELEASE_VERSION})"
        sh "(cd lightning-standalone; ${mvn} versions:set -DnewVersion=${STANDALONE_RELEASE_VERSION})"
        sh "(cd jmeter-lightning-maven-plugin; ${mvn} versions:set -DnewVersion=${PLUGIN_RELEASE_VERSION})"
        sh "git add -A; git commit -m 'Release version bump'"
    }
    stage('CORE - Test and install') {
        sh "${mvn} -pl lightning-core clean test install"
    }
    stage('CORE - Tag release') {
        sh "git tag core-${CORE_RELEASE_VERSION}"
    }
    stage('CORE - Release') {
        sh "${mvn} -pl lightning-core clean deploy -P release -Dgpg.passphrase=${GPG_PASSPHRASE}"
    }
    stage('STANDALONE - Generate JAR file') {
        sh "${mvn} -pl lightning-standalone clean compile test assembly:single"
    }
    stage('STANDALONE - Help') {
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar -h"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar --help"
    }
    stage('STANDALONE - Stubbed ITs') {
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_1_1_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/report_10_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_1_1_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0_2s.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0_2s.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/file/junit.sh)"
    }
    stage('STANDALONE - Tag release') {
        sh "git tag standalone-${STANDALONE_RELEASE_VERSION}"
    }
    stage('STANDALONE - Archive JAR') {
        archiveArtifacts artifacts: 'lightning-standalone/target/lightning-standalone-*.jar'
    }
    stage('MAVEN-PLUGIN - Install') {
        sh "${mvn} -pl jmeter-lightning-maven-plugin clean install"
    }
    stage('MAVEN-PLUGIN - Stubbed ITs') {
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/report_10_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_1_1_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_3_0_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_3_0_0_2s.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_regexp.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_1_1_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_3_0_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_3_0_0_2s.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_regexp.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/report_2_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/report_2_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/file/junit.sh)"
    }
    stage('MAVEN-PLUGIN - ITs') {
        sh "${mvn} -pl jmeter-lightning-maven-plugin-it clean verify -P jmeter"
        sh "cat jmeter-lightning-maven-plugin-it/target/jmeter/bin/junit.xml"
        sh "cat lightning-jenkins.properties"
    }
    stage('MAVEN-PLUGIN - Tag release') {
        sh "git tag maven-plugin-${PLUGIN_RELEASE_VERSION}"
    }
    stage('MAVEN-PLUGIN - Release') {
        sh "${mvn} -pl jmeter-lightning-maven-plugin clean deploy -P release -Dgpg.passphrase=${GPG_PASSPHRASE}"
    }
    stage('Set snapshot version number') {
        sh "(cd lightning-core; ${mvn} versions:set -DnewVersion=${CORE_POST_RELEASE_SNAPSHOT_VERSION})"
        sh "(cd lightning-standalone; ${mvn} versions:set -DnewVersion=${STANDALONE_POST_RELEASE_SNAPSHOT_VERSION})"
        sh "(cd jmeter-lightning-maven-plugin; ${mvn} versions:set -DnewVersion=${PLUGIN_POST_RELEASE_SNAPSHOT_VERSION})"
        sh "git add -A; git commit -m 'Post-release version bump'"
    }
    stage('CORE - Test and install - snapshot') {
        sh "${mvn} -pl lightning-core clean test install"
    }
    stage('STANDALONE - Generate JAR file - snapshot') {
        sh "${mvn} -pl lightning-standalone clean compile test assembly:single"
    }
    stage('STANDALONE - Help - snapshot') {
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar -h"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar --help"
    }
    stage('STANDALONE - Stubbed ITs - snapshot') {
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_1_1_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/report_10_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_1_1_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_0.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_1.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0_2s.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0_2s.sh)"
        sh "(cd lightning-standalone; ./src/test/scripts/file/junit.sh)"
    }
    stage('MAVEN-PLUGIN - Install - snapshot') {
        sh "${mvn} -pl jmeter-lightning-maven-plugin clean install"
    }
    stage('MAVEN-PLUGIN - Stubbed ITs - snapshot') {
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/report_10_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_1_1_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_3_0_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_3_0_0_2s.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/console/output/verify_regexp.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_1_1_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_3_0_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_3_0_0_2s.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/verify_regexp.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/report_2_0.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/exit/code/report_2_1.sh)"
        sh "(cd jmeter-lightning-maven-plugin-it; ./src/test/scripts/file/junit.sh)"
    }
    stage('MAVEN-PLUGIN - ITs - snapshot') {
        sh "${mvn} -pl jmeter-lightning-maven-plugin-it clean verify -P jmeter"
        sh "cat jmeter-lightning-maven-plugin-it/target/jmeter/bin/junit.xml"
        sh "cat lightning-jenkins.properties"
    }
    stage('Merge release to master') {
        sh "git checkout master; git rebase feature/release"
        sh "git branch -d feature/release"
    }
    stage('Push release to origin/master') {
        sshagent(["${GIT_CREDENTIALS_ID}"]) {
            sh "git push --set-upstream origin master; git push --tags"
        }
    }
}