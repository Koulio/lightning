#!groovy

def sharedLib = new SharedLib()

def tagStandaloneRelease() {
    sh "git tag standalone-${RELEASE_VERSION}"
}

def runStandaloneJarStubbedITs() {
    sh "(cd lightning-standalone; ./src/test/scripts/console/output/report_10_0.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_1_1_1.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/console/output/verify_3_0_0_2s.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_1_1_1.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/exit/code/verify_3_0_0_2s.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_0.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/exit/code/report_2_1.sh)"
    sh "(cd lightning-standalone; ./src/test/scripts/file/junit.sh)"
}

def runStandaloneCsvITs() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "mvn -pl lightning-standalone-it -P jetty jetty:run &"
        sleep 5
        sh "mvn -pl lightning-standalone-it clean verify -Djmx.file=csv-test.jmx -Dresults.file.format=csv"
        sh "mvn -pl lightning-standalone-it -P jetty jetty:stop"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar verify -xml lightning-standalone-it/src/test/resources/lightning.xml --jmeter-csv lightning-standalone-it/target/jmeter/results/csv-test.csv"
    }
}

def runStandaloneSdwITs() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "mvn -pl lightning-standalone-it -P jetty jetty:run &"
        sleep 5
        sh "mvn -pl lightning-standalone-it clean verify -Djmx.file=sdw-test.jmx -Dresults.file.format=xml"
        sh "mvn -pl lightning-standalone-it -P jetty jetty:stop"
        sh "java -jar lightning-standalone/target/lightning-standalone-*.jar verify -xml lightning-standalone-it/src/test/resources/lightning.xml --jmeter-csv lightning-standalone-it/target/jmeter/bin/sdw-results.csv"
    }
}

def checkStandaloneJarHelpExitCodes() {
    // Check no exception is thrown (regression issue). Output is verified elsewhere.
    sh "java -jar lightning-standalone/target/lightning-standalone-*.jar"
    sh "java -jar lightning-standalone/target/lightning-standalone-*.jar -h"
    sh "java -jar lightning-standalone/target/lightning-standalone-*.jar --help"
}

def buildStandaloneJar() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh 'mvn -pl lightning-standalone clean compile test assembly:single'
        }
    } finally {
        junit 'lightning-standalone/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitStandaloneReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-standalone; mvn versions:set -DnewVersion=${RELEASE_VERSION})"
        sh "git add -A; git commit -m 'Lightning Standalone release version bump'"
    }
}

def commitStandaloneSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-standalone; mvn versions:set -DnewVersion=${POST_RELEASE_SNAPSHOT_VERSION})"
        sh "git add -A; git commit -m 'Lightning Standalone post-release version bump'"
    }
}

def archiveStandaloneJar() {
    archiveArtifacts artifacts: 'lightning-standalone/target/lightning-standalone-*.jar'
}



node {
    stage('Prepare') {
        sharedLib.cleanupWorkspaceAndCloneRepo()
        sharedLib.purge()
    }
    stage('Set release version number') {
        if ("${TEST_ONLY}" == "false") {
            commitStandaloneReleaseVersion()
        }
    }
    stage('Generate JAR file') {
        buildStandaloneJar()
    }
    stage('Test help') {
        checkStandaloneJarHelpExitCodes()
    }
    stage('Stubbed ITs') {
        runStandaloneJarStubbedITs()
    }
    stage('Tag release') {
        if ("${TEST_ONLY}" == "false") {
            tagStandaloneRelease()
        }
    }
    stage('Archive JAR') {
        archiveStandaloneJar()
    }
    stage('Set snapshot version number') {
        if ("${TEST_ONLY}" == "false") {
            commitStandaloneSnapshotVersion()
        }
    }
    stage('Push release to origin/master') {
        if ("${TEST_ONLY}" == "false" && "${DRY_RUN}" == "false") {
            sharedLib.push()
        }
    }
}